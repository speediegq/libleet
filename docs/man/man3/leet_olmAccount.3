.TH "leet::olmAccount" 3 "Version 0.1" "libleet" \" -*- nroff -*-
.ad l
.nh
.SH NAME
leet::olmAccount
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <libleet\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBusing\fP \fBjson\fP = nlohmann::json"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBhandleError\fP (\fBconst\fP std::string &\fBFailure\fP)"
.br
.RI "Throws an 'olm failure: ' error\&. "
.ti -1c
.RI "\fBvoid\fP \fBcreateAccount\fP ()"
.br
.RI "Creates an account\&. "
.ti -1c
.RI "\fBvoid\fP \fBloadAccount\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP)"
.br
.RI "Loads an account from pickle data using the pickle key\&. "
.ti -1c
.RI "\fBvoid\fP \fBcreateMegolmSession\fP ()"
.br
.RI "Creates a Megolm session\&. "
.ti -1c
.RI "\fBvoid\fP \fBloadMegolmSession\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP)"
.br
.RI "Loads a Megolm session from pickle data\&. "
.ti -1c
.RI "\fBvoid\fP \fBcreateIdentity\fP ()"
.br
.RI "Creates an identity\&. "
.ti -1c
.RI "\fBvoid\fP \fBupload\fP (\fBleet::User::CredentialsResponse\fP *\fBresp\fP)"
.br
.RI "Uploads the device keys\&. "
.ti -1c
.RI "\fBvoid\fP \fBcreateSession\fP (\fBleet::User::CredentialsResponse\fP *\fBresp\fP, \fBleet::Room::Room\fP *\fBroom\fP, \fBconst\fP std::vector< \fBleet::User::Profile\fP > &\fBusers\fP)"
.br
.RI "Creates a session with one or more users in the current room\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBencryptMessage\fP (\fBleet::User::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP std::string &\fBmessage\fP)"
.br
.RI "Encrypt a message\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBOlmAccount\fP *\fBacc\fP)"
.br
.RI "Pickle an OlmAccount*\&. "
.ti -1c
.RI "\fBOlmAccount\fP * \fBunpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP, \fBOlmAccount\fP *\fBacc\fP)"
.br
.RI "Unpickle an OlmAccount*\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBOlmInboundGroupSession\fP *\fBsession\fP)"
.br
.RI "Pickle an OlmInboundGroupSession*\&. "
.ti -1c
.RI "\fBOlmInboundGroupSession\fP * \fBunpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP, \fBOlmInboundGroupSession\fP *\fBsession\fP)"
.br
.RI "Unpickle an OlmInboundGroupSession*\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBOlmOutboundGroupSession\fP *\fBsession\fP)"
.br
.RI "Pickle an OlmOutboundGroupSession*\&. "
.ti -1c
.RI "\fBOlmOutboundGroupSession\fP * \fBunpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP, \fBOlmOutboundGroupSession\fP *\fBsession\fP)"
.br
.RI "Unpickle an OlmOutboundGroupSession*\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBOlmSession\fP *\fBsession\fP)"
.br
.RI "Pickle an OlmSession*\&. "
.ti -1c
.RI "\fBOlmSession\fP * \fBunpickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP, \fBOlmSession\fP *\fBsession\fP)"
.br
.RI "Unpickle an OlmSession*\&. "
.ti -1c
.RI "\fBvoid\fP \fBclear\fP ()"
.br
.RI "Clean up by clearing the Olm account\&. "
.ti -1c
.RI "\fBvoid\fP \fBdestroy\fP ()"
.br
.RI "Free memory that has been allocated\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBaccountMemory\fP"
.br
.ti -1c
.RI "\fBOlmAccount\fP * \fBAccount\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fButilityMemory\fP"
.br
.ti -1c
.RI "\fBOlmUtility\fP * \fBUtility\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBmegolmSessionMemory\fP"
.br
.ti -1c
.RI "\fBOlmOutboundGroupSession\fP * \fBmegolmSession\fP"
.br
.ti -1c
.RI "\fBchar\fP * \fBmegolmSessionID\fP"
.br
.ti -1c
.RI "std::size_t \fBmegolmSessionIDLength\fP"
.br
.ti -1c
.RI "\fBchar\fP * \fBmegolmSessionKey\fP"
.br
.ti -1c
.RI "std::size_t \fBmegolmSessionKeyLength\fP"
.br
.ti -1c
.RI "\fBchar\fP * \fBIdentity\fP"
.br
.ti -1c
.RI "std::size_t \fBidentityLength\fP"
.br
.ti -1c
.RI "\fBchar\fP * \fBSignature\fP"
.br
.ti -1c
.RI "std::size_t \fBsignatureLength\fP"
.br
.ti -1c
.RI "\fBint\fP \fBkeysRemaining\fP {0}"
.br
.ti -1c
.RI "std::string \fBcurve25519\fP"
.br
.ti -1c
.RI "std::string \fBed25519\fP"
.br
.ti -1c
.RI "std::map< std::string, \fBOlmSession\fP * > \fBolmSessions\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBaccountMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fBidentityMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fBsignatureMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fBolmSessionMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fBmegolmSessionMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fBmegolmSessionIDMemoryAllocated\fP {\fBfalse\fP}"
.br
.ti -1c
.RI "\fBbool\fP \fButilityMemoryAllocated\fP {\fBfalse\fP}"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "\fBusing\fP \fBleet::olmAccount::json\fP =  nlohmann::json"

.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP leet::olmAccount::clear ()\fC [inline]\fP"

.PP
Clean up by clearing the Olm account\&. 
.SS "\fBvoid\fP leet::olmAccount::createAccount ()\fC [inline]\fP"

.PP
Creates an account\&. Creates an account, to be uploaded\&. In basic test clients, or clients that will only run once or run constantly it is fine to call this each time the program is restarted, but for proper clients you should call this function once, pickle the data, store the key and data and unpickle the data using \fBunpickle()\fP or the convenient \fBloadAccount()\fP function\&. 
.SS "\fBvoid\fP leet::olmAccount::createIdentity ()\fC [inline]\fP"

.PP
Creates an identity\&. 
.SS "\fBvoid\fP leet::olmAccount::createMegolmSession ()\fC [inline]\fP"

.PP
Creates a Megolm session\&. Creates a megolm session\&. 
.SS "\fBvoid\fP leet::olmAccount::createSession (\fBleet::User::CredentialsResponse\fP * resp, \fBleet::Room::Room\fP * room, \fBconst\fP std::vector< \fBleet::User::Profile\fP > & users)\fC [inline]\fP"

.PP
Creates a session with one or more users in the current room\&. 
.PP
\fBParameters\fP
.RS 4
\fIresp\fP CredentialsResponse object, required for authentication\&. 
.br
\fIroom\fP The room to send and create the event in\&. 
.br
\fIusers\fP Vector of users to create a session with\&. 
.RE
.PP

.SS "\fBvoid\fP leet::olmAccount::destroy ()\fC [inline]\fP"

.PP
Free memory that has been allocated\&. 
.SS "\fBconst\fP std::string leet::olmAccount::encryptMessage (\fBleet::User::CredentialsResponse\fP * resp, \fBconst\fP std::string & message)\fC [inline]\fP"

.PP
Encrypt a message\&. 
.PP
\fBParameters\fP
.RS 4
\fIresp\fP CredentialsResponse object, required for authentication\&. 
.br
\fImessage\fP \fBMessage\fP to encrypt\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a json string containing the encrypted cipher text\&.
.RE
.PP
Returns string json containing encrypted cipher text, which can then be uploaded to the server as an event 
.SS "\fBvoid\fP leet::olmAccount::handleError (\fBconst\fP std::string & Failure)\fC [inline]\fP"

.PP
Throws an 'olm failure: ' error\&. 
.PP
\fBParameters\fP
.RS 4
\fIFailure\fP String to append to the error\&. 
.RE
.PP

.SS "\fBvoid\fP leet::olmAccount::loadAccount (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData)\fC [inline]\fP"

.PP
Loads an account from pickle data using the pickle key\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP Pickle key to use when unpickling the data\&. This must be stored by the client\&. 
.br
\fIpickleData\fP Pickle data to unpickle with the key\&. This must be stored by the client\&.
.RE
.PP
Loads an account from pickle data and a pickle key\&. The pickle key should be stored somewhere, preferably encrypted for security reasons\&. Your client should (must) store the pickle data as well\&. This function does not check if the data is valid, so you should make sure it is\&. A runtime error will occur otherwise\&.
.PP
Don't forget to free accountMemory 
.SS "\fBvoid\fP leet::olmAccount::loadMegolmSession (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData)\fC [inline]\fP"

.PP
Loads a Megolm session from pickle data\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP Pickle key to use when unpickling the data\&. This must be stored by the client\&. 
.br
\fIpickleData\fP Pickle data to unpickle with the key\&. This must be stored by the client\&.
.RE
.PP
Loads a megolm session from pickle data 
.SS "\fBconst\fP std::string leet::olmAccount::pickle (\fBconst\fP std::string & pickleKey, \fBOlmAccount\fP * acc)\fC [inline]\fP"

.PP
Pickle an OlmAccount*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to pickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a pickle for an OlmAccount\&. The client should (must) store this safely\&. It is considered sensitive data\&.
.RE
.PP
Returns a pickle for an OlmAccount 
.SS "\fBconst\fP std::string leet::olmAccount::pickle (\fBconst\fP std::string & pickleKey, \fBOlmInboundGroupSession\fP * session)\fC [inline]\fP"

.PP
Pickle an OlmInboundGroupSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to pickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a pickle for an OlmInboundGroupSession\&. The client should (must) store this safely\&. It is considered sensitive data\&.
.RE
.PP
Returns a pickle for an OlmInboundGroupSession 
.SS "\fBconst\fP std::string leet::olmAccount::pickle (\fBconst\fP std::string & pickleKey, \fBOlmOutboundGroupSession\fP * session)\fC [inline]\fP"

.PP
Pickle an OlmOutboundGroupSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to pickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a pickle for an OlmOutboundGroupSession\&. The client should (must) store this safely\&. It is considered sensitive data\&.
.RE
.PP
Returns a pickle for an OlmOutboundGroupSession 
.SS "\fBconst\fP std::string leet::olmAccount::pickle (\fBconst\fP std::string & pickleKey, \fBOlmSession\fP * session)\fC [inline]\fP"

.PP
Pickle an OlmSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to pickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a pickle for an OlmSession\&. The client should (must) store this safely\&. It is considered sensitive data\&.
.RE
.PP
Returns a pickle for an OlmSession 
.SS "\fBOlmAccount\fP * leet::olmAccount::unpickle (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData, \fBOlmAccount\fP * acc)\fC [inline]\fP"

.PP
Unpickle an OlmAccount*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to unpickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.br
\fIpickleData\fP The pickle data returned by a \fBpickle()\fP function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns an OlmAccount*\&.
.RE
.PP
Returns a pickle for an OlmAccount 
.SS "\fBOlmInboundGroupSession\fP * leet::olmAccount::unpickle (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData, \fBOlmInboundGroupSession\fP * session)\fC [inline]\fP"

.PP
Unpickle an OlmInboundGroupSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to unpickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.br
\fIpickleData\fP The pickle data returned by a \fBpickle()\fP function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns an OlmInboundGroupSession*\&.
.RE
.PP
Returns a pickle for an OlmInboundGroupSession 
.SS "\fBOlmOutboundGroupSession\fP * leet::olmAccount::unpickle (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData, \fBOlmOutboundGroupSession\fP * session)\fC [inline]\fP"

.PP
Unpickle an OlmOutboundGroupSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to unpickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.br
\fIpickleData\fP The pickle data returned by a \fBpickle()\fP function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns an OlmOutboundGroupSession*\&.
.RE
.PP
Returns a pickle for an OlmOutboundGroupSession 
.SS "\fBOlmSession\fP * leet::olmAccount::unpickle (\fBconst\fP std::string & pickleKey, \fBconst\fP std::string & pickleData, \fBOlmSession\fP * session)\fC [inline]\fP"

.PP
Unpickle an OlmSession*\&. 
.PP
\fBParameters\fP
.RS 4
\fIpickleKey\fP The key that should be used to unpickle\&. The client should (must) store this safely\&. It is considered sensitive data\&. 
.br
\fIpickleData\fP The pickle data returned by a \fBpickle()\fP function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Returns an OlmSession*\&.
.RE
.PP
Returns a pickle for an OlmSession 
.SS "\fBvoid\fP leet::olmAccount::upload (\fBleet::User::CredentialsResponse\fP * resp)\fC [inline]\fP"

.PP
Uploads the device keys\&. 
.PP
\fBParameters\fP
.RS 4
\fIresp\fP CredentialsResponse object, required for authentication\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBOlmAccount\fP* leet::olmAccount::Account"

.SS "\fBvoid\fP* leet::olmAccount::accountMemory"

.SS "\fBbool\fP leet::olmAccount::accountMemoryAllocated {\fBfalse\fP}"

.SS "std::string leet::olmAccount::curve25519"

.SS "std::string leet::olmAccount::ed25519"

.SS "\fBchar\fP* leet::olmAccount::Identity"

.SS "std::size_t leet::olmAccount::identityLength"

.SS "\fBbool\fP leet::olmAccount::identityMemoryAllocated {\fBfalse\fP}"

.SS "\fBint\fP leet::olmAccount::keysRemaining {0}"

.SS "\fBOlmOutboundGroupSession\fP* leet::olmAccount::megolmSession"

.SS "\fBchar\fP* leet::olmAccount::megolmSessionID"

.SS "std::size_t leet::olmAccount::megolmSessionIDLength"

.SS "\fBbool\fP leet::olmAccount::megolmSessionIDMemoryAllocated {\fBfalse\fP}"

.SS "\fBchar\fP* leet::olmAccount::megolmSessionKey"

.SS "std::size_t leet::olmAccount::megolmSessionKeyLength"

.SS "\fBvoid\fP* leet::olmAccount::megolmSessionMemory"

.SS "\fBbool\fP leet::olmAccount::megolmSessionMemoryAllocated {\fBfalse\fP}"

.SS "\fBbool\fP leet::olmAccount::olmSessionMemoryAllocated {\fBfalse\fP}"

.SS "std::map<std::string, \fBOlmSession\fP*> leet::olmAccount::olmSessions"

.SS "\fBchar\fP* leet::olmAccount::Signature"

.SS "std::size_t leet::olmAccount::signatureLength"

.SS "\fBbool\fP leet::olmAccount::signatureMemoryAllocated {\fBfalse\fP}"

.SS "\fBOlmUtility\fP* leet::olmAccount::Utility"

.SS "\fBvoid\fP* leet::olmAccount::utilityMemory"

.SS "\fBbool\fP leet::olmAccount::utilityMemoryAllocated {\fBfalse\fP}"


.SH "Author"
.PP 
Generated automatically by Doxygen for libleet from the source code\&.
