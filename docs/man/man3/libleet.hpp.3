.TH "/home/speedie/libleet/include/libleet.hpp" 3 "Version 0.1" "libleet" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/speedie/libleet/include/libleet.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <ctime>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <exception>\fP
.br
\fC#include <random>\fP
.br
\fC#include <map>\fP
.br
\fC#include <nlohmann/json\&.hpp>\fP
.br
\fC#include <cpr/cpr\&.h>\fP
.br
\fC#include <olm/error\&.h>\fP
.br
\fC#include <olm/olm\&.h>\fP
.br
\fC#include <olm/sas\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBleetCrypto::randomBytes\fP"
.br
.RI "Class used to generate random bytes\&. "
.ti -1c
.RI "class \fBleet::User::Credentials\fP"
.br
.RI "\fBCredentials\fP class which contains fields passed to login requests\&. "
.ti -1c
.RI "class \fBleet::User::CredentialsResponse\fP"
.br
.RI "Class which contains the response from the Matrix homeserver on initial login\&. "
.ti -1c
.RI "class \fBleet::User::Device\fP"
.br
.RI "Class which represents a single device for a user\&. "
.ti -1c
.RI "class \fBleet::User::Profile\fP"
.br
.RI "Class which represents a user profile, along with his or her devices\&. "
.ti -1c
.RI "class \fBleet::VOIP::Credentials\fP"
.br
.RI "Class which represents TURN server credentials returned\&. "
.ti -1c
.RI "class \fBleet::Room::Room\fP"
.br
.RI "Class which represents a single room, along with its properties\&. "
.ti -1c
.RI "class \fBleet::Room::RoomConfiguration\fP"
.br
.RI "Class which represents settings for a single room that should be created\&. "
.ti -1c
.RI "class \fBleet::Space::Space\fP"
.br
.RI "Class which represents a space, which is a collection of rooms\&. "
.ti -1c
.RI "class \fBleet::Message::Message\fP"
.br
.RI "Class which represents a single message, along with its properties\&. "
.ti -1c
.RI "class \fBleet::Attachment::Attachment\fP"
.br
.RI "Class which represents an uploaded attachment\&. "
.ti -1c
.RI "class \fBleet::Filter::Filter\fP"
.br
.RI "\fBFilter\fP, can be used to find an event ID by functions that make use of it\&. "
.ti -1c
.RI "class \fBleet::Sync::userEvent\fP"
.br
.RI "Class that represents a user event\&. "
.ti -1c
.RI "class \fBleet::Sync::nameEvent\fP"
.br
.RI "Class that represents a name event\&. "
.ti -1c
.RI "class \fBleet::Sync::inviteEvent\fP"
.br
.RI "Class that represents an invite event\&. "
.ti -1c
.RI "class \fBleet::Sync::megolmSession\fP"
.br
.RI "Class that represents a Megolm session sent in the room\&. "
.ti -1c
.RI "class \fBleet::Sync::Sync\fP"
.br
.RI "Class containing objects of all the other classes in \fBleet::Sync\fP\&. "
.ti -1c
.RI "class \fBleet::Event::Event\fP"
.br
.RI "Class that represents a generic event not covered by another class\&. "
.ti -1c
.RI "class \fBleet::olmAccount\fP"
.br
.ti -1c
.RI "class \fBleet::Encryption\fP"
.br
.RI "Class which hopefully allows you to safely handle encryption and Olm memory\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBleetCrypto\fP"
.br
.ti -1c
.RI "namespace \fBleet\fP"
.br
.ti -1c
.RI "namespace \fBleet::User\fP"
.br
.ti -1c
.RI "namespace \fBleet::VOIP\fP"
.br
.ti -1c
.RI "namespace \fBleet::Room\fP"
.br
.ti -1c
.RI "namespace \fBleet::Space\fP"
.br
.ti -1c
.RI "namespace \fBleet::Message\fP"
.br
.ti -1c
.RI "namespace \fBleet::Attachment\fP"
.br
.ti -1c
.RI "namespace \fBleet::Filter\fP"
.br
.ti -1c
.RI "namespace \fBleet::Sync\fP"
.br
.ti -1c
.RI "namespace \fBleet::Event\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBLEET_IDENTIFIER_USERID\fP, \fBLEET_IDENTIFIER_THIRDPARTYID\fP, \fBLEET_IDENTIFIER_PHONE\fP }"
.br
.ti -1c
.RI "enum { \fBLEET_TYPE_PASSWORD\fP, \fBLEET_TYPE_TOKEN\fP }"
.br
.ti -1c
.RI "enum { \fBLEET_PRESET_TRUSTED_PRIVATE\fP, \fBLEET_PRESET_PRIVATE\fP, \fBLEET_PRESET_PUBLIC\fP }"
.br
.ti -1c
.RI "enum { \fBLEET_ERROR_NONE\fP, \fBLEET_ERROR_MSG_IS_NOT_AN_ENCRYPTED_MSG\fP, \fBLEET_ERROR_SESSION_FOR_MSG_WAS_NOT_RETRIEVED\fP, \fBLEET_ERROR_SESSION_IS_NOT_PROPERLY_ENCRYPTED\fP, \fBLEET_ERROR_FAILED_TO_CREATE_INBOUND_SESSION\fP, \fBLEET_ERROR_MESSAGE_HAS_NO_SENDER\fP, \fBLEET_ERROR_MESSAGE_HAS_WRONG_SENDER\fP, \fBLEET_ERROR_MESSAGE_HAS_WRONG_USERID\fP, \fBLEET_ERROR_NOT_OUR_MESSAGE\fP, \fBLEET_ERROR_WRONG_MESSAGE_TYPE\fP, \fBLEET_ERROR_WRONG_MESSAGE_ALGORITHM\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBleetCrypto::fillWithRandomBytes\fP (void *_data, size_t _length)"
.br
.RI "Simply fills a buffer with random bytes\&. "
.ti -1c
.RI "\fBconst\fP \fBint\fP \fBleet::generateTransID\fP ()"
.br
.RI "Generate a new transaction ID by simply incrementing the existing ID by 1\&. "
.ti -1c
.RI "\fBconst\fP \fBbool\fP \fBleet::saveTransID\fP (\fBconst\fP std::string &\fBFile\fP)"
.br
.RI "Saves the stored transaction ID to a file\&. "
.ti -1c
.RI "\fBconst\fP \fBbool\fP \fBleet::loadTransID\fP (\fBconst\fP std::string &\fBFile\fP)"
.br
.RI "Loads the stored transaction ID from a file\&. "
.ti -1c
.RI "template<typename T > T \fBleet::saveToFile\fP (const std::string &File, T Data)"
.br
.RI "Saves data to a file\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBT\fP > \fBT\fP \fBleet::loadFromFile\fP (\fBconst\fP std::string &\fBFile\fP)"
.br
.RI "Loads data from a file\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::returnServerDiscovery\fP (std::string \fBServer\fP)"
.br
.RI "Performs server discovery (\&.well-known/matrix/client) to find the proper Matrix home server URL\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::returnHomeServerFromString\fP (\fBconst\fP std::string &userID)"
.br
.RI "Returns a home server (matrix\&.org) from a user ID (@speedie:matrix\&.org) "
.ti -1c
.RI "std::vector< std::string > \fBleet::returnSupportedLoginTypes\fP ()"
.br
.RI "Get login types supported by the Matrix home server\&. "
.ti -1c
.RI "std::vector< std::string > \fBleet::returnSupportedSpecs\fP ()"
.br
.RI "Get supported Matrix specification versions\&. "
.ti -1c
.RI "\fBUser::CredentialsResponse\fP \fBleet::registerAccount\fP (\fBUser::Credentials\fP *\fBcred\fP)"
.br
.RI "Attempts to create an account on the home server\&. "
.ti -1c
.RI "\fBbool\fP \fBleet::checkRegistrationTokenValidity\fP (\fBconst\fP std::string &Token)"
.br
.RI "Check if a registration token is still valid or not\&. "
.ti -1c
.RI "\fBUser::CredentialsResponse\fP \fBleet::loginAccount\fP (\fBUser::Credentials\fP *\fBcred\fP)"
.br
.RI "Attempts to log in to the home server\&. "
.ti -1c
.RI "\fBUser::CredentialsResponse\fP \fBleet::refreshAccessToken\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP)"
.br
.RI "Refresh an old access token (if a refresh token is available in the object) "
.ti -1c
.RI "\fBUser::Profile\fP \fBleet::getUserData\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP std::string &userID)"
.br
.RI "Returns user data in the form of a \fBUser::Profile\fP object\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::getAPI\fP (\fBconst\fP std::string &\fBAPI\fP)"
.br
.RI "Returns a full API URL from a Matrix endpoint\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Get\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBAuthentication\fP)"
.br
.RI "Invokes a Get request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Put\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBData\fP, \fBconst\fP std::string &\fBAuthentication\fP)"
.br
.RI "Invokes a Put request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Post\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBData\fP, \fBconst\fP std::string &\fBAuthentication\fP)"
.br
.RI "Invokes a Post request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Get\fP (\fBconst\fP std::string &URL)"
.br
.RI "Invokes a Get request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Put\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBData\fP)"
.br
.RI "Invokes a Put request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Post\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBData\fP)"
.br
.RI "Invokes a Post request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Post_File\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBFile\fP)"
.br
.RI "Invokes a Post request\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::invokeRequest_Post_File\fP (\fBconst\fP std::string &URL, \fBconst\fP std::string &\fBFile\fP, \fBconst\fP std::string &\fBAuthentication\fP)"
.br
.RI "Invokes a Post request\&. "
.ti -1c
.RI "\fBRoom::Room\fP \fBleet::returnRoom\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP)"
.br
.RI "Gets information about a room based on a room ID\&. "
.ti -1c
.RI "\fBRoom::Room\fP \fBleet::createRoom\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::RoomConfiguration\fP *\fBconf\fP)"
.br
.RI "Create a room from a \fBRoom::RoomConfiguration\fP object\&. "
.ti -1c
.RI "\fBvoid\fP \fBleet::inviteUserToRoom\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP, \fBconst\fP std::string &\fBReason\fP)"
.br
.RI "Invite a user to a room,\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBRoom::Room\fP > \fBleet::returnRooms\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP \fBint\fP Limit)"
.br
.RI "Returns a vector of all rooms your user has joined\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBRoom::Room\fP > \fBleet::returnRoomIDs\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP)"
.br
.RI "Returns room IDs for all the rooms your user has joined\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::findRoomID\fP (std::string Alias)"
.br
.RI "Resolves a room alias and returns the room ID\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBSpace::Space\fP > \fBleet::returnSpaces\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP \fBint\fP Limit)"
.br
.RI "Returns a vector of all spaces your user has joined\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBRoom::Room\fP > \fBleet::returnRoomsInSpace\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP std::string &spaceID, \fBconst\fP \fBint\fP Limit)"
.br
.RI "Returns a vector of all rooms in a space\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::findUserID\fP (\fBconst\fP std::string &Alias, \fBconst\fP std::string &\fBHomeserver\fP)"
.br
.RI "Converts an incomplete user ID to a full user ID\&. (i\&.e\&. speedie is converted to @speedie:matrix\&.org) "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::returnUserName\fP (\fBconst\fP std::string &userID)"
.br
.RI "Returns <name> from <name>:<home server> "
.ti -1c
.RI "\fBconst\fP std::vector< \fBUser::Profile\fP > \fBleet::returnUsersInRoom\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP)"
.br
.RI "Returns a vector of all users in a room\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBUser::Device\fP > \fBleet::returnDevicesFromUser\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP std::vector< \fBUser::Profile\fP > &\fBuser\fP)"
.br
.RI "Returns a vector of all devices for a specific user\&. "
.ti -1c
.RI "\fBconst\fP \fBbool\fP \fBleet::checkIfUsernameIsAvailable\fP (\fBconst\fP std::string &Username)"
.br
.RI "Returns a boolean for whether a username is available on the home server or not\&. "
.ti -1c
.RI "\fBvoid\fP \fBleet::toggleTyping\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP \fBint\fP \fBTimeout\fP, \fBconst\fP \fBbool\fP \fBTyping\fP, \fBRoom::Room\fP *\fBroom\fP)"
.br
.RI "Toggles typing in a room\&. "
.ti -1c
.RI "\fBvoid\fP \fBleet::sendMessage\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP, \fBMessage::Message\fP *\fBmsg\fP)"
.br
.RI "Sends a plain text message to the specified room\&. "
.ti -1c
.RI "\fBconst\fP std::vector< \fBMessage::Message\fP > \fBleet::returnMessages\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP, \fBconst\fP \fBint\fP \fBmessageCount\fP)"
.br
.RI "Returns a \fBMessage::Message\fP vector from a room\&. "
.ti -1c
.RI "\fBconst\fP std::string \fBleet::returnFilter\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBFilter::Filter\fP *\fBfilter\fP)"
.br
.RI "Returns a filter ID which can be used when requesting data\&. "
.ti -1c
.RI "\fBAttachment::Attachment\fP \fBleet::uploadFile\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBconst\fP std::string &\fBFile\fP)"
.br
.RI "Uploads a file to the Matrix server(s)\&. "
.ti -1c
.RI "\fBconst\fP \fBbool\fP \fBleet::downloadFile\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBAttachment::Attachment\fP *Attachment, \fBconst\fP std::string &\fBoutputFile\fP)"
.br
.RI "Downloads a file from the Matrix server\&. "
.ti -1c
.RI "\fBconst\fP \fBint32_t\fP \fBleet::returnUnixTimestamp\fP ()"
.br
.RI "Gets the Unix timestamp\&. "
.ti -1c
.RI "\fBEvent::Event\fP \fBleet::returnEventFromTimestamp\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP, \fBconst\fP \fBint32_t\fP \fBTimestamp\fP, \fBconst\fP \fBbool\fP \fBDirection\fP)"
.br
.RI "Get an event from a Unix timestamp\&. "
.ti -1c
.RI "\fBEvent::Event\fP \fBleet::returnLatestEvent\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBRoom::Room\fP *\fBroom\fP)"
.br
.RI "Gets the latest event sent in the room\&. "
.ti -1c
.RI "\fBSync::Sync\fP \fBleet::returnSync\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP)"
.br
.RI "Get sync information from the server\&. "
.ti -1c
.RI "\fBVOIP::Credentials\fP \fBleet::returnTurnCredentials\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP)"
.br
.RI "Get TURN server credentials\&. "
.ti -1c
.RI "\fBEncryption\fP \fBleet::initEncryption\fP ()"
.br
.RI "Function that initializes an \fBEncryption\fP object properly\&. "
.ti -1c
.RI "\fBEncryption\fP \fBleet::initEncryptionFromPickle\fP (\fBconst\fP std::string &\fBpickleKey\fP, \fBconst\fP std::string &\fBpickleData\fP)"
.br
.RI "Function that initializes an \fBEncryption\fP object from a pickle key and pickle data\&. "
.ti -1c
.RI "\fBEncryption\fP \fBleet::uploadKeys\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBEncryption\fP *\fBenc\fP)"
.br
.RI "Function that uploads encryption keys for your account to the Matrix home server\&. "
.ti -1c
.RI "\fBEncryption\fP \fBleet::createSessionInRoom\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBEncryption\fP *\fBenc\fP, \fBRoom::Room\fP *\fBroom\fP)"
.br
.RI "Creates a session in a room\&. "
.ti -1c
.RI "\fBvoid\fP \fBleet::sendEncryptedMessage\fP (\fBUser::CredentialsResponse\fP *\fBresp\fP, \fBEncryption\fP *\fBenc\fP, \fBRoom::Room\fP *\fBroom\fP, \fBMessage::Message\fP *\fBmsg\fP)"
.br
.RI "Sends an encrypted message to a room\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::string \fBleet::Homeserver\fP { 'https://matrix\&.org' }"
.br
.ti -1c
.RI "std::string \fBleet::Error\fP"
.br
.ti -1c
.RI "std::string \fBleet::friendlyError\fP"
.br
.ti -1c
.RI "\fBint\fP \fBleet::leetError\fP {\fBLEET_ERROR_NONE\fP}"
.br
.ti -1c
.RI "\fBint\fP \fBleet::errorCode\fP {0}"
.br
.ti -1c
.RI "\fBint\fP \fBleet::TransID\fP {0}"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEET_IDENTIFIER_USERID \fP\fP
.TP
\fB\fILEET_IDENTIFIER_THIRDPARTYID \fP\fP
.TP
\fB\fILEET_IDENTIFIER_PHONE \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEET_TYPE_PASSWORD \fP\fP
.TP
\fB\fILEET_TYPE_TOKEN \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEET_PRESET_TRUSTED_PRIVATE \fP\fP
.TP
\fB\fILEET_PRESET_PRIVATE \fP\fP
.TP
\fB\fILEET_PRESET_PUBLIC \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEET_ERROR_NONE \fP\fP
.TP
\fB\fILEET_ERROR_MSG_IS_NOT_AN_ENCRYPTED_MSG \fP\fP
.TP
\fB\fILEET_ERROR_SESSION_FOR_MSG_WAS_NOT_RETRIEVED \fP\fP
.TP
\fB\fILEET_ERROR_SESSION_IS_NOT_PROPERLY_ENCRYPTED \fP\fP
.TP
\fB\fILEET_ERROR_FAILED_TO_CREATE_INBOUND_SESSION \fP\fP
.TP
\fB\fILEET_ERROR_MESSAGE_HAS_NO_SENDER \fP\fP
.TP
\fB\fILEET_ERROR_MESSAGE_HAS_WRONG_SENDER \fP\fP
.TP
\fB\fILEET_ERROR_MESSAGE_HAS_WRONG_USERID \fP\fP
.TP
\fB\fILEET_ERROR_NOT_OUR_MESSAGE \fP\fP
.TP
\fB\fILEET_ERROR_WRONG_MESSAGE_TYPE \fP\fP
.TP
\fB\fILEET_ERROR_WRONG_MESSAGE_ALGORITHM \fP\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for libleet from the source code\&.
