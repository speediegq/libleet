.TH "leet::Space::Space" 3 "Version 0.1" "libleet" \" -*- nroff -*-
.ad l
.nh
.SH NAME
leet::Space::Space \- Class which represents a space, which is a collection of rooms\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <libleet\&.hpp>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::string \fBspaceID\fP"
.br
.ti -1c
.RI "std::string \fBroomType\fP"
.br
.ti -1c
.RI "std::string \fBName\fP"
.br
.ti -1c
.RI "std::string \fBavatarURL\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBguestCanJoin\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBworldReadable\fP"
.br
.ti -1c
.RI "std::string \fBAlias\fP"
.br
.ti -1c
.RI "std::string \fBTopic\fP"
.br
.ti -1c
.RI "std::string \fBjoinRule\fP"
.br
.ti -1c
.RI "\fBint\fP \fBmemberCount\fP"
.br
.ti -1c
.RI "std::vector< \fBRoom::Room\fP > \fBRooms\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class which represents a space, which is a collection of rooms\&. 

This class represents a space, which in libleet is different from a room, for simplicity\&. In reality, a space is almost identical to a room\&.
.PP
TODO: Maybe we should inheret from rooms? 
.SH "Member Data Documentation"
.PP 
.SS "std::string leet::Space::Space::Alias"

.SS "std::string leet::Space::Space::avatarURL"

.SS "\fBbool\fP leet::Space::Space::guestCanJoin"

.SS "std::string leet::Space::Space::joinRule"

.SS "\fBint\fP leet::Space::Space::memberCount"

.SS "std::string leet::Space::Space::Name"

.SS "std::vector<\fBRoom::Room\fP> leet::Space::Space::Rooms"

.SS "std::string leet::Space::Space::roomType"

.SS "std::string leet::Space::Space::spaceID"

.SS "std::string leet::Space::Space::Topic"

.SS "\fBbool\fP leet::Space::Space::worldReadable"


.SH "Author"
.PP 
Generated automatically by Doxygen for libleet from the source code\&.
